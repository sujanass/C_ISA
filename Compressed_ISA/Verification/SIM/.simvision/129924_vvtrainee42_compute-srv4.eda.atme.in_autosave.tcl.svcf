
#
# Preferences
#
preferences set plugin-enable-svdatabrowser-new 1
preferences set toolbar-sendToIndago-WaveWindow {
  usual
  position -pos 1
}
preferences set toolbar-Standard-Console {
  usual
  position -pos 1
}
preferences set toolbar-Search-Console {
  usual
  position -pos 2
}
preferences set plugin-enable-groupscope 0
preferences set plugin-enable-interleaveandcompare 0
preferences set plugin-enable-waveformfrequencyplot 0
preferences set savedlg-simulator ppe

#
# Databases
#
database require wave -search {
	./wave.shm/wave.trn
	/home/vvtrainee42/Desktop/SUJANA/Compressed_ISA/Verification/SIM/wave.shm/wave.trn
}
#
# Groups
#
catch {group new -name FWD -overlay 0}
catch {group new -name HAZARD -overlay 0}
catch {group new -name MUX -overlay 0}
catch {group new -name REGISTER -overlay 0}
catch {group new -name MEM_READ -overlay 0}
catch {group new -name MEM_WRITE -overlay 0}
catch {group new -name {Group 7} -overlay 0}
catch {group new -name LOAD_WORD -overlay 0}
catch {group new -name STORE_WORD -overlay 0}
group using FWD
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    wave::C_ISA_top.dut.addr_gen_inst.fwd[1:0] \
    wave::C_ISA_top.dut.addr_gen_inst.alu_data[31:0] \
    wave::C_ISA_top.dut.addr_gen_inst.wb_data[31:0] \
    wave::C_ISA_top.dut.addr_gen_inst.mem_wb_data[31:0]
group using HAZARD
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    wave::C_ISA_top.dut.load_hazard_ctrl_inst.ld_hz_ctrl_clk \
    wave::C_ISA_top.dut.load_hazard_ctrl_inst.ld_hz_ctrl_rst \
    wave::C_ISA_top.dut.load_hazard_ctrl_inst.id_ex_mem_rd_en \
    wave::C_ISA_top.dut.load_hazard_ctrl_inst.GPR_ADDR_WIDTH \
    wave::C_ISA_top.dut.load_hazard_ctrl_inst.id_ex_rd[4:0] \
    wave::C_ISA_top.dut.id_ex_mem_rd_en \
    wave::C_ISA_top.dut.load_hazard_ctrl_inst.id_ex_rd[4:0] \
    wave::C_ISA_top.dut.load_hazard_ctrl_inst.if_id_rs1[4:0] \
    wave::C_ISA_top.dut.load_hazard_ctrl_inst.if_id_rs2[4:0] \
    wave::C_ISA_top.dut.load_hazard_ctrl_inst.stall_en \
    wave::C_ISA_top.dut.stall_pipeline
group using MUX
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    wave::C_ISA_top.dut.mem_reg_mux.DATA_WIDTH \
    wave::C_ISA_top.dut.mem_reg_mux.in1[31:0] \
    wave::C_ISA_top.dut.mem_reg_mux.in2[31:0] \
    wave::C_ISA_top.dut.mem_reg_mux.sel \
    wave::C_ISA_top.dut.mem_reg_mux.out[31:0]
group using REGISTER
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    wave::C_ISA_top.dut.reg_file_inst.dp_ram_inst.wr_en \
    wave::C_ISA_top.dut.reg_file_inst.dp_ram_inst.wr_addr[4:0] \
    wave::C_ISA_top.dut.reg_file_inst.dp_ram_inst.datain[31:0] \
    wave::C_ISA_top.dut.reg_file_inst.dp_ram_inst.regfile[31:0] \
    wave::C_ISA_top.dut.reg_file_inst.wr_data[31:0] \
    wave::C_ISA_top.dut.fwd_inst.reg_write_data[31:0] \
    wave::C_ISA_top.dut.fwd_inst.reg_write_data_1[31:0]
group using MEM_READ
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    wave::C_ISA_top.dut.data_mem_read_en \
    wave::C_ISA_top.dut.data_mem_read_addr[31:0] \
    wave::C_ISA_top.dut.data_mem_read_data_i[31:0]
group using MEM_WRITE
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    wave::C_ISA_top.dut.data_mem_write_en_o \
    wave::C_ISA_top.dut.data_mem_write_addr_o[31:0] \
    wave::C_ISA_top.dut.data_mem_write_data_o[31:0]
group using {Group 7}
group set -overlay 0
group set -comment {}
group clear 0 end

group using LOAD_WORD
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    wave::C_ISA_top.dut.instr_decoder.mem_rd_en_r \
    wave::C_ISA_top.dut.instr_decoder.reg_wr_en_r \
    wave::C_ISA_top.dut.instr_decoder.mem_to_reg_en_r \
    wave::C_ISA_top.dut.instr_decoder.mem_rd_en \
    wave::C_ISA_top.dut.instr_decoder.reg_wr_en \
    wave::C_ISA_top.dut.instr_decoder.source_reg1[4:0] \
    wave::C_ISA_top.dut.instr_decoder.source_reg2[4:0] \
    wave::C_ISA_top.dut.reg_file_inst.rs1[4:0] \
    wave::C_ISA_top.dut.addr_gen_inst.rs1_data[31:0] \
    wave::C_ISA_top.dut.addr_gen_inst.imm_val[31:0] \
    wave::C_ISA_top.dut.addr_gen_inst.oper1[31:0] \
    wave::C_ISA_top.dut.addr_gen_inst.oper2[31:0] \
    wave::C_ISA_top.dut.addr_gen_inst.addr_temp[31:0] \
    wave::C_ISA_top.dut.addr_gen_inst.addr[31:0] \
    wave::C_ISA_top.dut.id_ex_mem_rd_en
group using STORE_WORD
group set -overlay 0
group set -comment {}
group clear 0 end

group insert \
    wave::C_ISA_top.dut.addr_gen_inst.addr_rst \
    wave::C_ISA_top.dut.instr_decoder.source_reg2[4:0] \
    wave::C_ISA_top.dut.forwarding_inst.rs2[4:0] \
    wave::C_ISA_top.dut.reg_file_inst.dp_ram_inst.regfile[31:0] \
    wave::C_ISA_top.dut.reg_file_inst.rs2_data_r[31:0] \
    wave::C_ISA_top.dut.reg_file_inst.rs2_data[31:0] \
    wave::C_ISA_top.dut.addr_gen_inst.id_ex_mem_wr_en \
    wave::C_ISA_top.dut.instr_decoder.mem_wr_en_r \
    wave::C_ISA_top.dut.addr_gen_inst.ex_mem_mem_wr_en \
    wave::C_ISA_top.dut.instr_decoder.mem_wr_en \
    wave::C_ISA_top.dut.addr_gen_inst.mem_mem_wr_en \
    wave::C_ISA_top.DATA_MEM.data_mem_write_en_o \
    wave::C_ISA_top.DATA_MEM.data_mem_write_addr_o[31:0] \
    wave::C_ISA_top.DATA_MEM.data_mem_write_data_o[31:0] \
    wave::C_ISA_top.DATA_MEM.mem[0:16383] \
    wave::C_ISA_top.dut.instr_decoder.rs1[4:0] \
    wave::C_ISA_top.dut.reg_file_inst.rs1_data_r[31:0] \
    wave::C_ISA_top.dut.addr_gen_inst.imm_val[31:0] \
    wave::C_ISA_top.dut.addr_gen_inst.addr_temp[31:0] \
    wave::C_ISA_top.dut.addr_gen_inst.addr[31:0]

#
# Mnemonic Maps
#
mmap new  -reuse -name {Boolean as Logic} -radix %b -contents {{%c=FALSE -edgepriority 1 -shape low}
{%c=TRUE -edgepriority 1 -shape high}}
mmap new  -reuse -name {Example Map} -radix %x -contents {{%b=11???? -bgcolor orange -label REG:%x -linecolor yellow -shape bus}
{%x=1F -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=2C -bgcolor red -label ERROR -linecolor white -shape EVENT}
{%x=* -label %x -linecolor gray -shape bus}}

#
# Waveform windows
#
if {[catch {window new WaveWindow -name "Waveform 1" -geometry 1366x665+-1+27}] != ""} {
    window geometry "Waveform 1" 1366x665+-1+27
}
window target "Waveform 1" on
waveform using {Waveform 1}
waveform sidebar select designbrowser
waveform set \
    -primarycursor TimeA \
    -signalnames name \
    -signalwidth 175 \
    -units ns \
    -valuewidth 75
waveform baseline set -time 0

set id [waveform add -signals  {
	wave::C_ISA_top.dut.risc_clk
	} ]
set id [waveform add -signals  {
	wave::C_ISA_top.dut.risc_rst
	} ]
set id [waveform add -signals  {
	{wave::C_ISA_top.dut.instruction[15:0]}
	} ]
set id [waveform add -signals  {
	{wave::C_ISA_top.dut.instr_decoder.instruction_r[15:0]}
	} ]
set id [waveform add -signals  {
	wave::C_ISA_top.dut.instr_decoder.mem_wr_en
	} ]
set id [waveform add -signals  {
	wave::C_ISA_top.dut.instr_decoder.mem_wr_en_r
	} ]
set id [waveform add -signals  {
	{wave::C_ISA_top.dut.instr_decoder.opcode[1:0]}
	} ]
set id [waveform add -signals  {
	{wave::C_ISA_top.dut.instr_decoder.func2[1:0]}
	} ]
set id [waveform add -signals  {
	{wave::C_ISA_top.dut.instr_decoder.func3[2:0]}
	} ]
set id [waveform add -signals  {
	{wave::C_ISA_top.dut.instr_decoder.func4[3:0]}
	} ]
set id [waveform add -signals  {
	{wave::C_ISA_top.dut.instr_decoder.func6[5:0]}
	} ]
set id [waveform add -signals  {
	{wave::C_ISA_top.dut.instr_decoder.source_reg1[4:0]}
	} ]
set id [waveform add -signals  {
	{wave::C_ISA_top.dut.instr_decoder.rs1[4:0]}
	} ]
waveform format $id -radix %d
set id [waveform add -signals  {
	{wave::C_ISA_top.dut.instr_decoder.source_reg2[4:0]}
	} ]
set id [waveform add -signals  {
	{wave::C_ISA_top.dut.instr_decoder.rs2[4:0]}
	} ]
set id [waveform add -signals  {
	{wave::C_ISA_top.dut.reg_file_inst.rd[4:0]}
	} ]
set id [waveform add -signals  {
	wave::C_ISA_top.dut.instr_decoder.de_rst
	} ]
set id [waveform add -signals  {
	wave::C_ISA_top.dut.reg_file_inst.wr_data_en
	} ]
set id [waveform add -signals  {
	{wave::C_ISA_top.dut.reg_file_inst.wr_addr[4:0]}
	} ]
set id [waveform add -signals  {
	{wave::C_ISA_top.dut.reg_file_inst.wr_data[31:0]}
	} ]
set id [waveform add -signals  {
	wave::C_ISA_top.dut.addr_gen_inst.ld_valid_o
	} ]
set id [waveform add -signals  {
	wave::C_ISA_top.dut.addr_gen_inst.sd_valid_o
	} ]

set groupId0 [waveform add -groups STORE_WORD]
set gpGlist0 [waveform hierarchy contents $groupId0]
set gpID0 [lindex $gpGlist0 0]
foreach {name attrs}  {
    wave::C_ISA_top.dut.addr_gen_inst.addr_rst {}
    {wave::C_ISA_top.dut.instr_decoder.source_reg2[4:0]} {}
    {wave::C_ISA_top.dut.forwarding_inst.rs2[4:0]} {}
    {wave::C_ISA_top.dut.reg_file_inst.dp_ram_inst.regfile[31:0]} {}
    {wave::C_ISA_top.dut.reg_file_inst.rs2_data_r[31:0]} {}
    {wave::C_ISA_top.dut.reg_file_inst.rs2_data[31:0]} {}
    wave::C_ISA_top.dut.addr_gen_inst.id_ex_mem_wr_en {}
    wave::C_ISA_top.dut.instr_decoder.mem_wr_en_r {}
    wave::C_ISA_top.dut.addr_gen_inst.ex_mem_mem_wr_en {}
    wave::C_ISA_top.dut.instr_decoder.mem_wr_en {}
    wave::C_ISA_top.dut.addr_gen_inst.mem_mem_wr_en {}
    wave::C_ISA_top.DATA_MEM.data_mem_write_en_o {}
    {wave::C_ISA_top.DATA_MEM.data_mem_write_addr_o[31:0]} {}
    {wave::C_ISA_top.DATA_MEM.data_mem_write_data_o[31:0]} {}
    {wave::C_ISA_top.DATA_MEM.mem[0:16383]} {}
    {wave::C_ISA_top.dut.instr_decoder.rs1[4:0]} {-radix %x}
    {wave::C_ISA_top.dut.reg_file_inst.rs1_data_r[31:0]} {}
    {wave::C_ISA_top.dut.addr_gen_inst.imm_val[31:0]} {}
    {wave::C_ISA_top.dut.addr_gen_inst.addr_temp[31:0]} {}
    {wave::C_ISA_top.dut.addr_gen_inst.addr[31:0]} {}
} childcmds {
    {}
    {}
    {}
    {
        set id $gpID0
        waveform hierarchy collapse $id
    }
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format fullpath $gpID0] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID0 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist0 [lrange $gpGlist0 1 end]
    set gpID0 [lindex $gpGlist0 0]
}


set groupId0 [waveform add -groups LOAD_WORD]
set gpGlist0 [waveform hierarchy contents $groupId0]
set gpID0 [lindex $gpGlist0 0]
foreach {name attrs}  {
    wave::C_ISA_top.dut.instr_decoder.mem_rd_en_r {}
    wave::C_ISA_top.dut.instr_decoder.reg_wr_en_r {}
    wave::C_ISA_top.dut.instr_decoder.mem_to_reg_en_r {}
    wave::C_ISA_top.dut.instr_decoder.mem_rd_en {}
    wave::C_ISA_top.dut.instr_decoder.reg_wr_en {}
    {wave::C_ISA_top.dut.instr_decoder.source_reg1[4:0]} {}
    {wave::C_ISA_top.dut.instr_decoder.source_reg2[4:0]} {}
    {wave::C_ISA_top.dut.reg_file_inst.rs1[4:0]} {-radix %d}
    {wave::C_ISA_top.dut.addr_gen_inst.rs1_data[31:0]} {}
    {wave::C_ISA_top.dut.addr_gen_inst.imm_val[31:0]} {}
    {wave::C_ISA_top.dut.addr_gen_inst.oper1[31:0]} {}
    {wave::C_ISA_top.dut.addr_gen_inst.oper2[31:0]} {}
    {wave::C_ISA_top.dut.addr_gen_inst.addr_temp[31:0]} {}
    {wave::C_ISA_top.dut.addr_gen_inst.addr[31:0]} {}
    wave::C_ISA_top.dut.id_ex_mem_rd_en {}
} childcmds {
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {
        set id $gpID0
        waveform hierarchy collapse $id
    }
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format fullpath $gpID0] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID0 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist0 [lrange $gpGlist0 1 end]
    set gpID0 [lindex $gpGlist0 0]
}


set groupId0 [waveform add -groups FWD]


set groupId0 [waveform add -groups MEM_READ]
waveform hierarchy collapse $groupId0


set groupId0 [waveform add -groups MEM_WRITE]
waveform hierarchy collapse $groupId0


set groupId0 [waveform add -groups REGISTER]


set groupId0 [waveform add -groups MUX]
waveform hierarchy collapse $groupId0


set groupId0 [waveform add -groups HAZARD]
set gpGlist0 [waveform hierarchy contents $groupId0]
set gpID0 [lindex $gpGlist0 0]
foreach {name attrs}  {
    wave::C_ISA_top.dut.load_hazard_ctrl_inst.ld_hz_ctrl_clk {}
    wave::C_ISA_top.dut.load_hazard_ctrl_inst.ld_hz_ctrl_rst {}
    wave::C_ISA_top.dut.load_hazard_ctrl_inst.id_ex_mem_rd_en {}
    wave::C_ISA_top.dut.load_hazard_ctrl_inst.GPR_ADDR_WIDTH {-radix %x}
    {wave::C_ISA_top.dut.load_hazard_ctrl_inst.id_ex_rd[4:0]} {}
    wave::C_ISA_top.dut.id_ex_mem_rd_en {}
    {wave::C_ISA_top.dut.load_hazard_ctrl_inst.id_ex_rd[4:0]} {}
    {wave::C_ISA_top.dut.load_hazard_ctrl_inst.if_id_rs1[4:0]} {}
    {wave::C_ISA_top.dut.load_hazard_ctrl_inst.if_id_rs2[4:0]} {}
    wave::C_ISA_top.dut.load_hazard_ctrl_inst.stall_en {}
    wave::C_ISA_top.dut.stall_pipeline {}
} childcmds {
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
    {}
} {
    set expected [ join [waveform signals -format fullpath $gpID0] ]
    if {[string equal $name $expected] || $name == "cdivider"} {
        if {$attrs != ""} {
            eval waveform format $gpID0 $attrs
        }
        if { $childcmds != ""} {
            eval $childcmds
        }
    }
    set gpGlist0 [lrange $gpGlist0 1 end]
    set gpID0 [lindex $gpGlist0 0]
}
waveform hierarchy collapse $groupId0


waveform xview limits 18.86ns 32.805ns

#
# Waveform Window Links
#

#
# Source Browser windows
#
if {[catch {window new SrcBrowser -name "Source Browser 2" -geometry 700x525+28+58}] != ""} {
    window geometry "Source Browser 2" 700x525+28+58
}
window target "Source Browser 2" on
srcbrowser using {Source Browser 2}
srcbrowser set \
    -primarycursor TimeA \
    -units ns \
    -radix default \
    -showstrength 0 \
    -showcallstack 0 \
    -displayvalues 0

srcbrowser show -scope C_ISA_top.dut.addr_gen_inst -file /home/vvtrainee42/Desktop/SUJANA/Compressed_ISA/RTL_6/ld_sd_address_gen.sv -line 154

srcbrowser sidebar visibility partial

#
# Console windows
#
console set -windowname Console
window geometry Console 600x250+0+0

#
# Layout selection
#
